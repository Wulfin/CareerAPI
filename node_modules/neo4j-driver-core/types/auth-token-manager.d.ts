/**
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AuthToken } from './types';
/**
 * Interface for the piece of software responsible for keeping track of current active {@link AuthToken} across the driver.
 * @interface
 * @experimental Exposed as preview feature.
 * @since 5.8
 */
export default class AuthTokenManager {
    /**
     * Returns a valid token.
     *
     * **Warning**: This method must only ever return auth information belonging to the same identity.
     * Switching identities using the `AuthTokenManager` is undefined behavior.
     *
     * @returns {Promise<AuthToken>|AuthToken} The valid auth token or a promise for a valid auth token
     */
    getToken(): Promise<AuthToken> | AuthToken;
    /**
     * Called to notify a token expiration.
     *
     * @param {AuthToken} token The expired token.
     * @return {void}
     */
    onTokenExpired(token: AuthToken): void;
}
/**
 * Interface which defines an {@link AuthToken} with an expiration data time associated
 * @interface
 * @experimental Exposed as preview feature.
 * @since 5.8
 */
export declare class AuthTokenAndExpiration {
    readonly token: AuthToken;
    readonly expiration?: Date;
    private constructor();
}
/**
 * Creates a {@link AuthTokenManager} for handle {@link AuthToken} which is expires.
 *
 * **Warning**: `tokenProvider` must only ever return auth information belonging to the same identity.
 * Switching identities using the `AuthTokenManager` is undefined behavior.
 *
 * @param {object} param0 - The params
 * @param {function(): Promise<AuthTokenAndExpiration>} param0.tokenProvider - Retrieves a new valid auth token.
 * Must only ever return auth information belonging to the same identity.
 * @returns {AuthTokenManager} The temporal auth data manager.
 * @experimental Exposed as preview feature.
 */
export declare function expirationBasedAuthTokenManager({ tokenProvider }: {
    tokenProvider: () => Promise<AuthTokenAndExpiration>;
}): AuthTokenManager;
/**
 * Create a {@link AuthTokenManager} for handle static {@link AuthToken}
 *
 * @private
 * @param {param} args - The args
 * @param {AuthToken} args.authToken - The static auth token which will always used in the driver.
 * @returns {AuthTokenManager} The temporal auth data manager.
 */
export declare function staticAuthTokenManager({ authToken }: {
    authToken: AuthToken;
}): AuthTokenManager;
/**
 * Checks if the manager is a StaticAuthTokenManager
 *
 * @private
 * @experimental
 * @param {AuthTokenManager} manager The auth token manager to be checked.
 * @returns {boolean} Manager is StaticAuthTokenManager
 */
export declare function isStaticAuthTokenManger(manager: AuthTokenManager): manager is StaticAuthTokenManager;
declare class StaticAuthTokenManager implements AuthTokenManager {
    private readonly _authToken;
    constructor(_authToken: AuthToken);
    getToken(): AuthToken;
    onTokenExpired(_: AuthToken): void;
}
export {};
